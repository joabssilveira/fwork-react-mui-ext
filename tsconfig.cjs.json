{
  // see https://www.typescriptlang.org/tsconfig to better understand tsconfigs
  "include": [
    "src",
    "types"
  ],
  "compilerOptions": {
    "module": "CommonJS",
    // O que o parâmetro "lib" faz?
    // Ele define quais bibliotecas padrão do TypeScript devem ser incluídas no processo de compilação.
    // "DOM" adiciona tipos e APIs relacionadas ao navegador (ex.: document, window, etc.).
    // "ESNext" inclui as últimas funcionalidades do JavaScript (como Promise, Map, Set, etc.).
    // Posso manter "DOM" e "ESNext"?
    // Sim, se o código usa APIs do navegador: Por exemplo, se você interage com o DOM ou utiliza bibliotecas relacionadas ao navegador, deve manter "DOM".
    // Não, se o código é exclusivo para Node.js: Se o código não usa APIs do navegador, pode ser melhor ajustar para evitar confusões, pois "DOM" inclui tipos que não existem em Node.js (ex.: window).
    "lib": [
      "DOM",
      "ESNext"
    ],
    "importHelpers": true,
    // output .d.ts declaration files for consumers
    "declaration": true,
    // output .js.map sourcemap files for consumers
    "sourceMap": true,
    // match output dir to input dir. e.g. dist/index instead of dist/src/index
    "rootDir": "./src",
    // stricter type-checking for stronger correctness. Recommended by TS
    "strict": true,
    // linter checks for common issues
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    // noUnused* overlap with @typescript-eslint/no-unused-vars, can disable if duplicative
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    // use Node's module resolution algorithm, instead of the legacy TS one
    "moduleResolution": "node",
    // transpile JSX to React.createElement
    "jsx": "react",
    // interop between ESM and CJS modules. Recommended by TS
    "esModuleInterop": true,
    // significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
    "skipLibCheck": true,
    // error out if import and file system have a casing mismatch. Recommended by TS
    "forceConsistentCasingInFileNames": true,
    // `tsdx build` ignores this option, but it is commonly used when type-checking separately with `tsc`
    // "noEmit": true,
    "noEmit": false,

    "outDir": "./dist/cjs",
    "declarationDir": "./dist/types",
    "target": "es2020",
  }
}